---
title: "Using R to Predict Antimicrobial Resistance Rates." 
subtitle: "Analysis performed using antimicrobial susceptibility test data for all isolates from blood cultures collected at NUTH from Q1 2019 onwards."
institute: "Newcastle upon Tyne Hospitals NHS Foundation Trust"
author: "Daniel Weiand" 
#date: "`r format(Sys.time(), '%a %B %d %Y')`" 
date: today
date-format: "dddd, D MMMM, YYYY"
self-contained: true

# #Some options need to be set in format > html
# format:
#   html:
#     #output-file: 'file' #Output file to write to
#     #output-ext: #Extension to use for generated output file
#     code-fold: false
#     code_download: true
#     embed-resources: true
#     standalone: true
#     toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
#     toc-depth: 2 #Specify the number of section levels to include in the table of contents. The default is 3
#     toc_float: TRUE
#     highlight-style: pygments
#     fig-path: 'figures/'
#     fig-width: 9 #default is 7
#     fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
#     # fig-height: 6 #default is 7
#     fig-align: 'left' #Possible values are default, left, right, and center.
#     fig-format: 'png' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
#     fig-cap-location: 'top' #top bottom or margin
#     fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
#     df-print: paged #kable, tibble or paged. The default printing method is kable.
#     theme:
#     - mystyle.scss
#     - default #Quarto includes 25 themes from the Bootswatch project (for example, the website uses the cosmo theme). Available themes include: default cerulean cosmo cyborg darkly flatly journal litera lumen lux materia minty morph pulse quartz sandstone simplex sketchy slate solar spacelab superhero united vapor yeti zephyr
    
# #Some options need to be set in format > docx
# format:
#   docx:
#     reference-doc: word-styles-reference-01.docx #Word document that will be used as a style reference in producing final docx (Word) document
#     toc: true #Include an automatically generated table of contents. This option has no effect if standalone is false.
#     toc-depth: 1 #Specify the number of section levels to include in the table of contents. The default is 3
#     toc-title: 'Table of Contents' #The title used for the table of contents.
#     page-width: 6.5 #Target page width for output (used to compute columns widths for layout divs). Defaults to 6.5 inches, which corresponds to default letter page settings in docx and odt.
#     fig-path: 'figures/'
#     fig-width: 5 #default is 7
#     fig-asp: 0.618 #When fig-asp is specified, the height of a plot (the option fig-height) is calculated from fig-width * fig-asp (the golden ratio is 0.618).
#     # fig-height: 6 #default is 7
#     fig-align: 'center' #Possible values are default, left, right, and center.
#     fig-format: 'svg' #The graphical device to generate plot files. retina, png, jpeg, svg, or pdf
#     fig-cap-location: 'top' #top bottom or margin
#     fig-dpi: 300 #The DPI (dots per inch) for bitmap devices (default = 72)
#     df-print: default #kable, tibble or paged. The default printing method is kable.

# # Some options need to be set in format > revealjs
format:
  revealjs:
    incremental: true #Incrementally reveal elements https://rstudio-conf-2022.github.io/get-started-quarto/materials/05-presentations.html#/lists
    width: 1600
    height: 900
    #css: ["mystyle.css"]
    default-image-extension: svg
    theme: serif #full list of available themes: beige blood dark default league moon night serif simple sky solarized
    scrollable: true
    smaller: false
    transition: fade
    transition-speed: fast
    reference-location: document #If you prefer that footnotes be included at the end of the document, specify the reference-location: document option
    logo: Newcastlelaboratories_logo.png
    #footer: "Footer text"
    menu:
      side: left #Navigation Menu location
      width: normal  #Navigation Menu width
      numbers: true 	#Add slide numbers to menu items.
    slide-number: c/t #c/t = Slide number / total slides (default)
    show-slide-number: all #all = Show slide numbers in all contexts (default)
    embed-resources: true
    standalone: true

#Some referencing options need to be set in bibliography:, csl:, and link-citations: 
bibliography: biblio.bib  #Document bibliography (BibTeX or CSL). May be a single file or a list of files
csl: bmj.csl #Citation Style Language file to use for formatting references.
link-citations: yes

#Some code chunk options need to be set in execute (credit: @rappa753)
execute:
  echo: FALSE #Include cell source code in rendered output. 
  warning: FALSE #If FALSE, all warnings will be printed in the console instead of the output document
  error: TRUE #By default, the code evaluation will not stop even in case of errors! If we want to stop on errors, we need to set this option to FALSE.
  message: FALSE #Whether to preserve messages emitted by message() (similar to the option warning
  cache: FALSE #use the cache option to cache the results of computations. You may however need to manually refresh the cache if you know that some other input (or even time) has changed sufficiently to warrant an update. To do this, render either individual files or an entire project using the --cache-refresh option, e.g. [terminal] quarto render mydoc.qmd --cache-refresh # single doc or [terminal] quarto render --cache-refresh # entire project

editor: source

# parameterized reporting
params:
  directorate_recoded: "NA"
  directorate: "NA"
  location_code: "NA"
  paediatric: "NA"
  elderly_care: "NA"
  # year: "NA"
# location_code: {{ location_code }}
# as_mo_genus: 'Candida'
# year: 2021

---

```{r project_setup}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: project setup

library(here)

source(here("01_src", "01_initialise.R"))

```

```{r data_import}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: data import

source(here("01_src", "02_data_import - read database.R"))

```

```{r params}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: params

source(here("01_src", "03_wrangle - params from db.R"))

```

```{r functions}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle AMR data

# functions ---------------------------------------------------------------

source(here("01_src", "03_wrangle - functions.R"))

```

```{r wrangle_AMR_predict}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle AMR predict


source(here("01_src", "03_wrangle - AMR_predict_functions.R"))

```

```{r wrangle_survival_data}
#| eval: true
#| include: false
#| echo: false
#| error: false
#| message: false
#| label: wrangle survival data

source(here("01_src", "03_wrangle - survival analysis.R"))

```


<!-- ## Parameter(s) for report -->

<!-- This report focuses on the following parameter(s): -->

<!-- Directorate: **`r params$directorate`** -->

<!-- Directorate: **`r params$directorate_recoded`** -->

<!-- Location of blood culture collection: **`r params$location_code`** -->

<!-- Patient age (Paediatric): **`r params$paediatric`** -->

<!-- Elderly care: **`r params$elderly_care`** -->

<!-- Date of blood culture receipt (year): **`r params$year`** -->

## Session aims

:::: {.columns}

::: {.column width="60%"}

1. Introduce R

2. Point out useful learning resources

3. Run through a working example of a project completed (in its entirety) using R

:::

::: {.column width="40%"}

![](NHS-R/objectives.png)

:::

::::

## What is R?

:::: {.columns}

::: {.column width="60%"}

- R is one of the most commonly used languages for data science, together with Python.

- R is a powerful, free open source data science and statistics environment, used in industry, academia and major corporations (eg Microsoft, Google, Facebook).

- R benefits from a worldwide community that freely shares learning and resources, through e.g. [GitHub](https://github.com/send2dan/)

:::

::: {.column width="40%"}
![](NHS-R/rpython.png)

:::

::::

## Let's start with the elephant in the room

![](NHS-R/getty_182657409_970741970450051_59650.jpg){width="534"}

. . .

Yes, to use R, we need to learn some code

. . .

No, it's not rocket science.

## Learn to ~~code~~ copy-paste

![](NHS-R/copy-paste-code.png)

## Why use R for data science?

:::: {.columns}

::: {.column width="60%"}

- Data has transformed our world in powerful ways and can help us make better decisions.

- Almost every interaction with the health service leaves a digital trace - raw information that has phenomenal potential.

- But raw data is not powerful on its own. It must be shaped, checked, curated and analysed. And then it must be communicated, and acted upon. This work requires people, with modern data skills, in teams, using platforms like R to do the heavy lifting and avoid needless duplication of effort.

- The [Goldacre report](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1067053/goldacre-review-using-health-data-for-research-and-analysis.pdf) actively promotes the use of R in the NHS.

- NUTH now actively supports the use of R at scale, and it can be installed on any work PC (simply call IT and ask to be added the "SCCM-R" group)

:::

::: {.column width="40%"}

![](NHS-R/goldacre.png)
:::

::::

## Many of you are already familiar with R

![](NHS-R/ft.png)

## NHS-R

:::: {.columns}

::: {.column width="60%"}

- The Health Foundation supports [NHS-R](https://nhsrcommunity.com/about/), which delivers **free**-to-NHS-staff online training. 

- It's **free** to register.

- Courses are really popular and spaces are limited to about 20 per session. Sessions are scheduled once a month. To be notified when further dates are scheduled, please contact: [nhs.rcommunity\@nhs.net](nhs.rcommunity@nhs.net)

- [NHS-R](https://nhsrcommunity.com/about/) runs the premier data science conference in the NHS,  along with regular skill-based webinars.

- [NHS-R](https://nhsrcommunity.com/about/) supports a thriving [Slack](https://nhsrcommunity.slack.com/) community
:::

::: {.column width="40%"}

![](NHS-R/nhsrwebsite.png)

![](NHS-R/slack.png)

:::

::::

## Other useful resources

:::: {.columns}

::: {.column width="60%"}

- [NHS-R](https://nhsrcommunity.com/about/) is active on [#twitter](https://www.twitter.com/) 

- The <span style="color:red;">#Rstats</span> and  <span style="color:red;">#TidyTuesday</span> hashtags are excellent

- There are lots of good [online courses](https://www.edx.org/course/data-science-r-basic)

- And lots of excellent [freely available textbooks](https://r4ds.had.co.nz/).

![](NHS-R/r4ds.png)

:::

::: {.column width="40%"}

![](NHS-R/rstats.png)



:::

::::

## R helps maintain momentum and promotes collaboratoration

. . . 

We know that projects can quickly lose momentum and get stuck

. . .

![](NHS-R/1_V2HNHoZ3WBSXGn1CuohXxg.jpeg){width="700"}

## R can beat mission creep

. . .

"Just one more subanalysis"

![](NHS-R/9780670015634.jpeg){width="500"}

. . .

Think: Re-running reports after filtering the data by various substrata.

## R easily handles big (and growing) data sets

. . .

"Just a bit more data" 

![](NHS-R/Bigger-data-690.jpg){width="500"}

. . .

Think: Re-running reports when more data becomes available.

## R can help you get to the end

. . .

"Just (one more... last... final!) final report"

![](NHS-R/summaries.jpg){width="850"}

Think: Re-drafting the same report multiple times to get your paper accepted through peer review

## R supports reproducible research and QI

```{r}
#| include: true
#| eval: true
#| echo: false
#| label: grviz

graph <- "

digraph boxes_and_circles {

# a 'graph' statement

graph [overlap = false, 
fontsize = 12,
layout = neato]
  
# add node statements

node [shape = oval
      fontname = arial
      penwidth = 2.0]
F [label = 'R scripts'
      fontname = arial]
E [label = 'Quarto reports'
      fontname = arial]
      
node [shape = box
      fontname = arial
      penwidth = 2.0]
A [label = 'Undertake truly reproducible research\n\nData, content and executable code'
      fontname = arial]
B [label = 'Create content using code chunks\n\nTables, diagrams and figures'
      fontname = arial]
C [label = 'Easily add references\n\nCitations, cross-references and bibliographies'
      fontname = arial]
D [label = 'Publish in various formats\n\nPDF, HTML, Word, Presentations'
      fontname = arial]
 
F -> E -> {A B C D}

subgraph {
rank = same; A; B; C; D
}

# add graph statement
graph [nodesep = 1]

}
"

DiagrammeR::grViz(graph)

```

## This presentation was written in R

![](NHS-R/thisreport.png)

## And these papers were written entirely in R

:::: {.columns}

::: {.column width="33%"}
![](NHS-R/bmj-pub.png)
:::

::: {.column width="33%"}
![](NHS-R/bmj-pub2.png)

![](NHS-R/bmj-pub3.png)
:::

::: {.column width="33%"}
![](NHS-R/bmj-pub-christmas.png)
:::

::::

## R and python are quickly overtaking SAS, SPSS and Stata

:::: {.columns}

::: {.column width="33%"}

- In terms of jobs

![](NHS-R/jobs.png){width="500"}

:::

::: {.column width="33%"}

- In terms of output

![](NHS-R/articles_n.png){width="500"}

:::

::: {.column width="33%"}

- In terms of impact

![](NHS-R/impact.png){width="500"}
:::

::::

## R and python are quickly overtaking SAS, SPSS and Stata

:::: {.columns}

::: {.column width="50%"}

- In terms of Google scholar hits

![](NHS-R/trend_google.png){width="500"}

:::

::: {.column width="50%"}

- In terms of Stack Overflow queries

![](NHS-R/trend_stack.png){width="500"}
:::

::::

## Avoiding excel has its benefits

![](NHS-R/excel_errors.png)

## So now for a working example 

. . . 

- Aim: Predict Antimicrobial Resistance (AMR) Rates for Blood Culture Isolates at NUTH, using R

- Objectives:

  - Import blood culture data into R

  - Wrangle, visualise, and exploring data using R

  - Analyse historical AMR rates, and model future AMR rates using R

## Methods

![](NHS-R/bc.png)

- `r min_date <- as_date(min(data_clean_sens$receive_date))
max_date <- as_date(max(data_clean_sens$receive_date))
glue::glue("The LIMS was interrogated to collect data on all culture-positive blood cultures collected between {min_date} and {max_date}")`

## The AMR package

![](NHS-R/amr-pub.png)

- The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR] is a free, open-source and independent package for [R](https://nhsrcommunity.com/installing-r-and-r-studio/) [@R-base] that provides a standard for clean and reproducible analysis and prediction of Antimicrobial Resistance (AMR). 

- This package was used to determine 'first isolates', as per Hindler et al [@hindler2007analysis], for use in the final analysis; calculate and visualise AMR data; and predict future AMR rates using regression models.

## Predicting future AMR rates 

![](NHS-R/amr-pub.png)

- The [AMR](https://msberends.github.io/AMR/articles/AMR.html) package [@AMR2022; @R-AMR] includes functions which, based on a date column, calculates cases per year and uses a regression model to predict antimicrobial resistance.

- The resistance_predict() function creates a prediction model including standard errors (SE), which are returned as columns se_min and se_max. 

- Valid options for the statistical model (argument model) are: "binomial", "poisson" and "linear".

## Totals 

- In total, `r data_clean_sens |>
distinct(specimen_no) |> 
count() |> 
pull()` distinct positive blood cultures were collected from `r data_clean_sens |> 
distinct(hospital_number) |> 
count() |> 
pull()` distinct patients, leading to isolation of `r data_clean_sens |> 
distinct(specimen_no, organism_code) |> 
count() |> 
pull()` organisms. 

- Taking into consideration **'first isolates'** only, `r data_1st |>
distinct(specimen_no) |> 
count() |> 
pull()` distinct positive blood cultures were collected from `r data_1st |> 
distinct(hospital_number) |> 
count() |> 
pull()` distinct patients, leading to isolation of `r data_1st |> 
distinct(specimen_no, organism_code) |> 
count() |> 
pull()` organisms. 

- **From this point onwards, this analysis concentrates only on 'first isolates' from blood cultures, to intelligently de-duplicate the data**

## Location of blood culture collection

```{r directorate_lump}
#top directorates of blood culture collection
data_1st %>% 
  filter(!is.na(directorate_recoded)) |> 
  mutate(directorate_lump = fct_lump_n(directorate_recoded, 10)) |> 
  group_by(directorate_lump) %>%
  summarise(total = n()) %>% 
  filter(total >1) %>% #only organisms isolated more than X times
  ggplot(aes(x = reorder(directorate_lump, -total), y = total))+
  geom_col()+
  coord_flip()+
  theme_minimal()+
  scale_fill_grey()+
  labs(title = "Blood culture collection directorate",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Ward",
       y = "n")
```

## Location of blood culture collection

```{r location_lump}
#top 10 locations of blood culture collection
data_1st %>% 
  mutate(location_lump = fct_lump_n(location_code, 10)) |> 
  group_by(location_lump) %>%
  summarise(total = n()) %>% 
  filter(total >1) %>% #only organisms isolated more than X times
  ggplot(aes(x = reorder(location_lump, -total), y = total))+
  geom_col()+
  coord_flip()+
  theme_minimal()+
  scale_fill_grey()+
  labs(title = "Blood culture collection location",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Ward",
       y = "n")
```

## Age-related data

Age of patients with positive blood cultures

```{r age_histogram}
#histogram number of positive blood cultures by age
data_1st %>% 
  filter(!is.na(age)) %>%
  ggplot(aes(x = age))+
  geom_histogram(bins = 30)+
  theme_minimal()+
  labs(title = "Age of patients with positive blood cultures",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Age",
       y = "n")
```

## Organism data 

```{r pareto_as_mo_shortname_lump_cum_count_species}
#pareto chart showing cum_count instead of cum_percent - as_mo_shortname
data_1st |> 
  freq(as_mo_shortname_lump) |>  
  ungroup() |> 
  mutate(cum_percent = cum_percent*100,
         item = factor(item, levels=item)) |> #Converting the categorical variable to a factor is really important here
  ggplot(aes(x = item))+
  geom_point(aes(y = cum_count), color = rgb(0, 1, 0), pch=16, size=1)+
  geom_bar(aes(y = count), fill = "grey", stat="identity")+
  geom_line(aes(y=cum_count, group=1), colour="black", lty=3, size=0.9) +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 45))+
  labs(title = "The most common blood culture isolates",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Organism",
       y = "n")
```

## Mean age of infection

```{r top_10_as_mo_shortname_lump_age}
#mean age of infection, stratified by organism (lumped)
data_1st %>% 
  ggplot(aes(age, reorder(as_mo_shortname_lump, desc(age))))+
  geom_boxplot()+
  labs(title = "Age of patients with positive blood cultures\nstratified by species of organism isolated",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = "Age",
       y = "Species")
```

## Time series data

```{r BC_data_over_time_interactive}

# BC data over time stratified by top 10 organisms 

ggplot_ggiraph_orgs <- data_1st %>% 
  #filter(as_mo_shortname == "S. aureus") |> 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(as_mo_shortname_lump, new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date, as_mo_shortname_lump) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() |> 
  ggplot() +
  ggiraph::geom_line_interactive(aes(x = thickened_date, y = n, colour = as_mo_shortname_lump, data_id = as_mo_shortname_lump, tooltip = as_mo_shortname_lump), linewidth = 1.5)+
  #coord_flip()+
  guides(colour = "legend")+
  guides(colour=guide_legend(title="Organism"))

# girafe_css(
#   css = "fill:orange;stroke:gray;",
#   text = "stroke:none; font-size: larger",
#   line = "fill:none",
#   area = "stroke-width:3px",
#   point = "stroke-width:3px",
#   image = "outline:2px red"
# )

girafe(ggobj = ggplot_ggiraph_orgs, 
       width_svg = 10, 
       height_svg = 7,
       options = list(
              opts_hover(css = "stroke:black;r:20pt;"),
              opts_hover_inv(css = "opacity:0.2;"), 
              opts_sizing(rescale = FALSE),
              opts_zoom(min = .7, max = 2)
))

```

## Distinct patients with positive blood cultures per month

```{r NHSRplotthedots_patients_n}
#number of distinct patients with positive blood cultures per month (using NHSRplotthedots)
data_1st %>% 
  mutate(new_date = floor_date(receive_date, 
                               unit = "1 month",
                               week_start = getOption("lubridate.week.start", 1)),
         year = year(receive_date)) %>% 
  distinct(new_date, hospital_number, .keep_all = TRUE) |> 
  group_by(year, new_date) %>%
  count() %>% 
  thicken(interval = "month",
          colname = 'thickened_date') |> 
  ungroup() |> 
  select(-new_date) |> 
  pad(interval = "month") %>% 
  fill_by_value() %>% 
  ptd_spc(value_field = n, date_field = thickened_date, improvement_direction = "decrease") %>% 
  ptd_create_ggplot(point_size = 2,
                    percentage_y_axis = FALSE,
                    main_title = "SPC chart",
                    x_axis_label = "date",
                    y_axis_label = "distinct patients (n)",
                    fixed_x_axis_multiple = TRUE,
                    fixed_y_axis_multiple = TRUE,
                    x_axis_date_format = "%m/%y",
                    x_axis_breaks = "3 months",
                    y_axis_breaks = NULL,
                    icons_size = 0L,
                    icons_position = c("top right", "bottom right", "bottom left", "top left", "none"),
                    colours = ptd_spc_colours(),
                    theme_override = NULL,
                    break_lines = c("both", "limits", "process", "none"))+
  labs(title = "Distinct patients with positive blood cultures per month",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "n")+
  scale_y_continuous(minor_breaks = NULL,
                     breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))

```

## Survival data

```{r kaplan_meier_plot_gramstain}
p2 <- survfit2(Surv(receive_date_to_date_of_death, died_recoded) ~ as_mo_gramstain, 
               data = data_1st_survival_analysis_subset) %>% 
  ggsurvfit(size = 1) + #consider type = "cumhaz" / linetype_aes = TRUE
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) + 
  add_confidence_interval() +
  add_risktable()+
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0.60, 1))+
  scale_x_continuous(limits = c(0, 365))+
  #ggsurvfit::add_pvalue()+
  ggsurvfit::theme_ggsurvfit_KMunicate()+
  ggsurvfit::add_censor_mark()
#ggsurvfit::add_quantile()+
#ggsurvfit::add_risktable_strata_symbol()+
#ggsurvfit::theme_risktable_boxed()

p2
```

## Survival data

```{r kaplan_meier_plot_organism}
p3 <- survfit2(Surv(receive_date_to_date_of_death, died_recoded) ~ as_mo_shortname_recoded, 
               data = data_1st_survival_analysis_subset) %>% 
  ggsurvfit(size = 1) + #consider type = "cumhaz" / linetype_aes = TRUE
  labs(
    x = "Days",
    y = "Overall survival probability"
  ) + 
  add_confidence_interval() +
  add_risktable()+
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0.60, 1))+
  scale_x_continuous(limits = c(0, 365))+
  #ggsurvfit::add_pvalue()+
  ggsurvfit::theme_ggsurvfit_KMunicate()+
  ggsurvfit::add_censor_mark()
#ggsurvfit::add_quantile()+
#ggsurvfit::add_risktable_strata_symbol()+
#ggsurvfit::theme_risktable_boxed()

p3
```

## Historical trends in organism-specific AMR rates

```{r gram_neg_AST_results_ecoli}
# E. coli 
data_1st |> 
  filter(str_detect(as_mo_genus, "Escherichia|Klebsiella")) |> 
  select(year, hospital, as_mo_genus, AMX, AMC, TAZ, ETP, GEN, CIP, SXT, CAZ, CXM, ATM) |> #include only certain antibiotics
  group_by(year, as_mo_genus) |> 
  ggplot() + 
  # create bars with as_mo_genus on x axis. geom_sir looks for variables with class `sir` (earlier created with `as.sir`)
  geom_sir(x = "antibiotic", 
           translate_ab = FALSE,
           minimum = 10) + 
  #facet_sir(facet = "antibiotic") + # split plots on antibiotic
  scale_sir_colours() + #make R red and S/SI green and I yellow
  #scale_y_percent(breaks = 0:2 * 50) + # show percentages on y axis
  scale_y_continuous(minor_breaks = NULL,
                     limits = c(0, 1),
                     breaks = c(0, 0.5, 1),
                     label = c("0", "50", "100")) + # show percentages on y axis
  theme(axis.text.y = element_text(face = "italic"),
        axis.text.x = element_text(size = rel(0.9)),
        strip.text.y = element_text(size = rel(0.9),
                                    angle = 360),
        legend.position = "bottom") +
  coord_flip() +
  labs(title = "Susceptibility of E. coli and Klebsiella spp. \nto selected antimicrobials, stratified by year",
       subtitle = "First blood culture isolate per patient, Q1 2019 onwards",
       x = NULL,
       y = "Percentage susceptibility",
       caption = "Calculation of percentage susceptibility requires min. 30 blood culture isolates per year")+
  # and print genus in italic to follow our convention
  # (is now y axis because we turned the plot)
  facet_grid(as_mo_genus ~ year)
```

## Using R to predict AMR rates for a single antimicrobial 

```{r amr_predict_gram_neg_taz}
amr_predict(x = data_1st,
            Gramstain = "Gram-negative", 
            ab_amr_code = "TZP",
            ab_nuth_code = "TZP", 
            ab_name = "Tazocin", 
            model_type = "linear")
```

## Using R to compare AMR rate-predictions between different antimicrobials 

```{r amr_predict_gram_neg}
# Gram neg ----------------------------------------------------------------

#create tibble using map2 and gram_neg_ab_tibble and amr_predict_for_mapping
amr_predict_gram_neg_mapped_output <- map2(.x = gram_neg_ab_tibble$skim_variable,
        .y = gram_neg_ab_tibble$sir.ab_name,
        .f = ~amr_predict_for_mapping(x = data_1st,
                                       Gramstain = "Gram-negative", 
                                       ab_amr_code = .x, 
                                       ab_nuth_code = .x, 
                                       ab_name = .y, 
                                       model_type = "linear"
        ))

#print output using patchwork::wrap_plots()
patchwork::wrap_plots(amr_predict_gram_neg_mapped_output, 
                      nrow = 2) + 
  patchwork::plot_layout(guides = 'collect')+
  patchwork::plot_annotation(
    title = glue::glue("Predicted AMR rates of ", "Gram-negative", " organisms to select antimicrobials"),
    #subtitle = glue::glue(""),
    #tag_levels = 'I',
    caption = glue::glue("First blood culture isolate per patient, Q1 2019 onwards, \nexcluding organisms intrinsically resistant to the tested antimicrobial")
  ) +
  xlab("year")+
  ylab("% resistance")
```

## Using R to contrast predicted AMR rates in different patient populations

```{r by_hospital_gram_neg_walk}
# by_hospital - Gram-negative - AMR prediction
by_hospital_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable,
                                 .y = gram_neg_ab_tibble$sir.ab_name,
                                 .f = ~amr_predict_chart_nested(x = data_1st,
                                                                Gramstain = "Gram-negative", 
                                                                ab_amr_code = .x, 
                                                                nesting_crit = hospital, 
                                                                nesting_name = "hospital", 
                                                                n_bc = 100,
                                                                ab_nuth_code = .x, 
                                                                ab_name = .y, 
                                                                model_type = "linear",
                                                                nrow = 1,
                                                                plot_subtitle = NULL
                                 ))

# # walk 
# walk(by_hospital_gram_neg_amr, print)

#or print select antimicrobial
by_hospital_gram_neg_amr[[9]] #tazocin = 9

```

## Using R to contrast predicted AMR rates in different patient populations

```{r by_directorate_gram_neg_walk}
# by_directorate - Gram-negative - AMR prediction ---------------------------------
by_directorate_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable,
     .y = gram_neg_ab_tibble$sir.ab_name,
     .f = ~amr_predict_chart_nested(x = data_1st,
                             Gramstain = "Gram-negative", 
                             ab_amr_code = .x, 
                             nesting_crit = directorate_lump, 
                             nesting_name = "directorate", 
                             n_bc = 100,
                             ab_nuth_code = .x, 
                             ab_name = .y, 
                             model_type = "linear",
                             nrow = 2,
                             plot_subtitle = NULL
     ))

# #walk
# walk(by_directorate_gram_neg_amr, print)

# #or print select antimicrobial
by_directorate_gram_neg_amr[[9]] #tazocin = 9

```

## Using R to contrast predicted AMR rates in different patient populations

```{r by_location_lump_gram_neg_walk}
# by_location_lump - Gram-negative - AMR prediction ---------------------------------
by_location_lump_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable,
     .y = gram_neg_ab_tibble$sir.ab_name,
     .f = ~amr_predict_chart_nested(x = data_1st,
                             Gramstain = "Gram-negative", 
                             ab_amr_code = .x, 
                             nesting_crit = location_lump, 
                             nesting_name = "location", 
                             n_bc = 100,
                             ab_nuth_code = .x, 
                             ab_name = .y, 
                             model_type = "linear",
                             nrow = 2,
                             plot_subtitle = NULL
     ))

# #walk
# walk(by_location_lump_gram_neg_amr, print)

# #or print select antimicrobial
by_location_lump_gram_neg_amr[[9]] #tazocin = 9

```

## Using R to contrast predicted AMR rates in different patient populations

```{r by_age_group_gram_neg_walk}
# by_age_group - Gram-negative - AMR prediction
by_age_group_gram_neg_amr <- map2(.x = gram_neg_ab_tibble$skim_variable,
                                    .y = gram_neg_ab_tibble$sir.ab_name,
                                    .f = ~amr_predict_chart_nested(x = data_1st,
                                                            Gramstain = "Gram-negative", 
                                                            ab_amr_code = .x, 
                                                            nesting_crit = age_group, 
                                                            nesting_name = "age group", 
                                                            n_bc = 100,
                                                            ab_nuth_code = .x, 
                                                            ab_name = .y, 
                                                            model_type = "linear",
                                                            nrow = 2,
                                                            plot_subtitle = NULL
                                    ))

# # walk 
# walk(by_age_group_gram_neg_amr, print)

#or print select antimicrobial
by_age_group_gram_neg_amr[[9]] #tazocin = 9
```

## Thanks for listening

:::: {.columns}

::: {.column width="60%"}

Daniel Weiand, Consultant medical microbiologist

Newcastle upon Tyne Hospitals NHS Foundation Trust

Email: <a href="mailto:dweiand@nhs.net?subject=NHS-R Conf 2022">dweiand\@nhs.net</a>

Twitter: [\@send2dan](https://twitter.com/intent/follow?ref_src=twsrc%5Etfw%7Ctwcamp%5Ebuttonembed%7Ctwterm%5Efollow%7Ctwgr%5Esend2dan&region=follow_link&screen_name=send2dan)

NHS-R community blog: <https://nhsrcommunity.com/author/daniel-weiand/>

GitHub: [send2dan](https://github.com/send2dan/)

:::

::: {.column width="40%"}

![](NHS-R/thank-you.jpg)

:::

::::

## References {.unnumbered}

::: {#refs}
:::

<!-- # Appendix {.unnumbered} -->

```{r beepr_finished}
beepr::beep(3)
```

